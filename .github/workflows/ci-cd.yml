name: CI/CD Pipeline

on:
    pull_request:
        branches:  ["**"]
    push:
        branches:  [develop, main]

env:
    project-directory: ./
    repository: yieldforge_contract
    
jobs:
    lint:
        name: Linting and formatting checks
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: actions-rs/toolchain@v1Setup Rust
              with:
                toolchain: stable
                override: true
                components: clippy, rustfmt

            - name:  Run Clippy (Lint)
              run: cargo clippy --all-targets --all-features -- -D warnings
              working-directory: ${{ env.project-directory }}
            
            - name: Check Formatting
              run: cargo fmt -- --check
              working-directory: ${{ env.project-directory }}

    test:
        name: Automated testing
        runs-on: ubuntu-latest
        needs: lint
        if: github.event_name == 'pull_request' 
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
            
            - name: Setup Rust
              uses: actions-rs/toolchain@v1Setup Rust
              with:
                toolchain: stable 
                override: true

            - name: Run Tests
              run: cargo test --all --verbose
              working-directory: ${{ env.project-directory }}
        
    build:
        name: Build Project
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps: 
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: actions-rs/toolchain@v1Setup Rust
              with:
                toolchain: stable
                override: true

            - name: Build Project
              run: cargo build --release
              working-directory: ${{ env.project-directory }}
            
    security: 
        name: Security Scanning
        runs-on: ubuntu-latest
        needs: [lint, test, build]
        steps: 
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Install cargo-audit
              run:  cargo install cargo-audit

            - name: Run Security Audit
              run:  cargo audit

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v2
              with:
                language: cpp

            - name: Autobuild
              uses: github/codeql-action/autobuild@v2

            - name: Analyze CodeQL
              uses: github/codeql-action/analyze@v2

    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: [lint, test, build, security]
        if: github.ref == 'refs/heads/develop'
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Deloy to Staging
              run: |
               echo "Deploying to Staging Server..."
            #add real deploy to staging server

    deploy-production:
         name: Deploy to Production
         runs-on: ubuntu-latest
         needs: [lint, test, build, security]
         if: github.ref == 'refs/heads/main'
         steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Deploy to Production
              run: |
               echo "Deploying to Production Server..."
            #add real deploy to production server
    
    notify:
        name: Notify team
        runs-on: ubuntu-latest 
        if: ${{ failure() }}
        steps:
            - name: Send Notification
              run: |
               echo "Sending notification to the team..."

            # Sample Slack notification
            - name: Notify via Slack
              uses: slackapi/slack-github-action@v1.23.0
              with:
                payload: |
                       {
                        "text": "CI/CD Pipeline failed on ${{ github.ref }} in repo: ${{ github.repository }}. Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                       }
              env: 
                    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}